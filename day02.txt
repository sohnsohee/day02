git에서 저장하는 방식
  임시저장(stage에 올린다) -> 저장

stage에 변겨사항을 올리는 방법
  git add 파일이름

day02폴더는 git repository
  day02.txt 파일은 새롭게 만든 파일(untracked된 상태)
                                 (unstaged된 상태)
  
  git add day02.txt
    --> day02.txt가 stage에 올라갔고(staged 상태)
        변경사항을 추적할 수 있는 상태(tracked)

  day02.txt를 수정
    --> day02.txt가 modified 상태가 되었다
        (tracked 상태)(unstaged 상태)

  day02.txt 수정사항을 stage에 올림
    git add day02.txt
  
  영구저장
    (stage에 올라가있는 임시저장된 파일들만 영구저장이 된다)

untracked
  무조건 처음 새롭게 만들어진 파일은 untracked

tracked
  한번이라도 stage에 올라갔고, commit이 되었다면 tracked

commit을 할때는 staged된 파일만 가능

stage에 한번에 모든 파일 올리기
  git add .

commit하면서 메시지를 동시에 작성하는 옵션
  -m
    옵션
  git commit -m '메시지'

commit하면서 add하는 옵션
  -a
  git commit -a

  단, 파일이 tracked 상태일때만 가능
  -->untracked라면 사용불가
  -->새롭게 만들어진 파일이라면 사용불가

두가지 동시에
  -am
  git commit -am '메시지'

초기설정
  git init으로 깃 레포지토리로 만든다
  git config --glbal user.name "사용자이름"
  git config --global user.email "이메일주소"
  으로 계정을 설정한다

파일이 수정된다
  --> git add .
  --> git commit -m '메시지'

git commit
  을 실행하면 메시지 입력 에디터가 뜬다
  이때 에디터에 글씨를 쓸 수 있도록
  i
  를 클릭하여 insert모드로 만들어서
  commit 메시지를 작성한 후에
  더이상 쓸 메시지가 없다면
  esc를 클릭하여 insert모드를 종료하고
  :wq
  를 입력하여 에디터를 종료한다

브랜치
  기능별로 혹은 파일별로 수정사항을
  저장할 수 있도록 도와주는 장치

  기본적으로 브랜치를 만들면
  master(또는 main)브랜치가 만들어진다

git repository에 존재하는 브랜치 목록 확인
  git branch